
V rámci semestrální práce předmětu MI-RUN jsme vytvořili vlastní programovací jazyk jménem QUACK, včetně překladače, který z tohoto jazyka vytváří bytecode, který lze interpretovat pomocí virtuálního stroje, jenž jsme také vytvořili. Jméno jazyka bylo zvoleno tak, že reprezentuje jednu ze základních vlastností jazyka a to jest dynamické (neboli kachní) typování. Další vlastností je, že podobně jako například Java je objektově orientovaný a tuto objektovost do jisté míry vynucuje (nelze třeba vytvořit funkci, která nepatří k žádné třídě). Z dalších vlastností jmenujme například podporu pouze jednoduché dědičnosti, možnost přetížení operátorů nebo podpora výjimek. Syntaxe jazyka se velice podobá Javě či C++. Ucelenou dokumentaci k tomuto jazyku jsme bohužel nestihli vytvořit. V přiložených příkladech jsou ale nastíněny mnohé možnosti, které náš jazyk nabízí.

Jak je výše uvedeno, program v QUACKu je nutné před vlastním spuštěním nejprve přeložit. Náš překladač se jmenuje Donald. Jeho frontend je vytvořen pomocí nástroje bison. Backend přkladače jsme si z pochopitelných důvodů vytvořili sami, aby generoval náš bytecode do námi vytvořeného formátu classfile. Vzhledem k tomu, že tento přemět není přímo zaměřen na překladač, tak má náš překladač bohužel několik omezení. Nepodporuje například možnost použití oparátoru . nebo -> několikrát za sebou. Dalším omezením je absenece podpory operátoru hranatých závorek. Tudíž nelze přeložit příkladové soubory example1.q, example2.q a example3.q, které pocházejí z fáze návrhu programovacího jazyka. Backend také nevytváří optimalizovaný kód a nevyužívá zdaleke všech možností, které náš bytecode nabízí.

Překladač se požívá následovně:

./donald output.qc < source_code.q

přičemž uvedení jména výstupního souboru je volitelné. Pokud není uvedeno žádné, soubor bude pojmenován a.qc.

Výstupem překladače je classfile, který lze interpretovat pomocí našeho virtuální stroje. Formát classfile není sice přímo zdokumentován, nicméně v souboru examples/hello.asm jsou popsány jeho jednotlivé části na jednoduchém příkladu. Tento souboru lze mimo jiné také přeložit pomocí programu nasm do skutečného classfile. Vlastní bytecode je poměrně podrobně zdokumentován v souboru common/include/bytecode.h. Náš bytecode obsahuje především instrukce typu 3AC a všechny instrukce jsou pevné (8-bytové) délky. Při svém běhu předpokládá přítomnost neomezeného počtu registrů (přesněji řečeno předpokládá, že jich má k dispozici 65536).

Virtuální stroj, jenž jsme pojmenovali Daisy, je tedy především registrovým strojem. To však neznamená, že by nepodporoval práci se zásobníkem. Zásobníky jsou ve VM dokonce dva. Prvnímu zasobníku říkáme hodnotový. Na ten se ukládá např. automatická záloha kontextu metody, argumenty metod anebo si zde program může uložit a přečíst cokoliv pomocí instrukcí na práci se zásobníkem. Díky automatické záloze kontextu, tedy omezení na 65 tisíc registrů neplatí pro celý program ale pouze pro aktuální metodu. Druhý zásobník se nazývá adresový a je řízen automaticky. Tento zásobník obsahuje např. návratové adresy, informace o aktuálně prováděné metodě, adresy handlerů výjimek apod. Nedílnou součástí VM je JIT, který je schopen překládat naš bytecode do strojového kódu platformy x86_64. Z toho plyne, že VM lze přeložit pouze na strojích s touto architekturou. Virtuální stroj (i kompilátor) byl překládán pouze pod operačním systémem GNU/Linux a to pomocí překladače g++. Funkčnost na jiných operačních systémech či překladačích proto nemůžeme zaručit.

Virtuální stroj lze použít následovně:

./daisy -nojit classfile.qc -args Hello

Výše uvedená řádka spustí soubor classfile.qc a předá mu jako argument řetězec Hello. Parametr -nojit je volitelný a pokud je uveden, tak zamezí použití JITu. Parametr -args je také volitelný.

Jako referenční program k demonstraci funkčnosti jsme si zvolili program pro řešení problému batohu. Implementace programu je v souboru examples/knapsack.q. Při spuštění si bere vstupní soubor s daty, který jsme si vypůjčili z předmětu MI-PAA. Nejjednodušší vzpůsob, jak je vzykoušet, je použítí Makefile v nejvyšším adresáři.
